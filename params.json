{"name":"Metrics-spring-autoconfigure","tagline":"","body":"## spring-boot-autoconfigure\r\n\r\n[![Build Status](https://travis-ci.org/sandor-nemeth/metrics-spring-autoconfigure.svg?branch=master)](https://travis-ci.org/sandor-nemeth/metrics-spring-autoconfigure)\r\n[![Coverage Status](https://coveralls.io/repos/sandor-nemeth/metrics-spring-autoconfigure/badge.svg?branch=master&service=github)](https://coveralls.io/github/sandor-nemeth/metrics-spring-autoconfigure?branch=master)\r\n[![License](https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0)\r\n[ ![Download](https://api.bintray.com/packages/sandor-nemeth/maven/metrics-spring-autoconfigure/images/download.svg) ](https://bintray.com/sandor-nemeth/maven/metrics-spring-autoconfigure/_latestVersion)\r\n\r\nSpring-Boot autoconfiguration library for the \r\n[metrics-spring](https://github.com/ryantenney/metrics-spring) library.\r\n\r\n**This documentation is only for the configuration of the plugin. For the possibilities of the \r\n[metrics-spring library](https://github.com/ryantenney/metrics-spring) library, and the \r\n[Dropwizard Metrics](http://metrics.dropwizard.io/) library itself please see the corresponding \r\npages themselves.**\r\n\r\n**This project is under active development, please expect that until v1.0.0 breaking changes can\r\n be submitted.**\r\n \r\n### Where to get it\r\n \r\nThe project is available currently on bintray:\r\n\r\n```xml\r\n<!-- Repository configuration -->\r\n<repository>\r\n  <id>bintray-sandor-nemeth-maven</id>\r\n  <name>bintray</name>\r\n  <url>http://dl.bintray.com/sandor-nemeth/maven</url>\r\n  <snapshots>\r\n    <enabled>false</enabled>\r\n  </snapshots>\r\n</repository>\r\n\r\n<!-- Artifact -->\r\n<dependency>\r\n  <groupId>com.sandornemeth</groupId>\r\n  <artifactId>metrics-spring-autoconfigure</artifactId>\r\n  <version>0.0.1</version>\r\n</dependency>\r\n```\r\n\r\n### How to use it\r\n\r\nUse it with Spring Boot's ```application.yml``` or ```application\r\n.properties```. The examples below are in yaml, but they can be easily ported to properties. \r\n\r\nAll ```*Unit``` properties are constants from the ```java.util.concurrent.TimeUnit``` class, and \r\nnow nothing else is supported.\r\n\r\nAs every reporter-type is an array, you are welcome to configure as many reporters, as you want.\r\n\r\n```yml \r\nspring:\r\n  metrics:\r\n    reporters:\r\n      console:\r\n        -\r\n          rateUnit: SECONDS\r\n          durationUnit: MILLISECONDS\r\n          reportInterval: 100\r\n          reportIntervalUnit: MILLISECONDS\r\n      csv:\r\n        - \r\n          rateUnit: SECONDS\r\n          durationUnit: MILLISECONDS\r\n          reportInterval: 100\r\n          reportIntervalUnit: MILLISECONDS\r\n          formatFor: US                             # java.util.Locale language tag\r\n          reportFolder: /report_dir                 # absolute path to the report folder\r\n      slf4j:\r\n        - \r\n          rateUnit: SECONDS\r\n          durationUnit: MILLISECONDS\r\n          reportInterval: 100\r\n          reportIntervalUnit: MILLISECONDS\r\n          prefix: prefix\r\n          logger: com.sandornemeth.MetricReport\r\n          loggingLevel: WARN                        # values: TRACE, DEBUG, INFO, WARN, ERROR\r\n          marker: marker\r\n```\r\n\r\nAlso, if the ```metrics-jvm``` library is included, metrics for the JVM are published.\r\n\r\n### What is to come: \r\n\r\n- Support for Graphite and Ganglia reporters\r\n- Metric filter configuration (regex and custom MetricFilter based on Spring beans)\r\n- Custom naming for the JVM metrics\r\n- I am not quite sure at the moment, what kind of health checks and instrumentations can be \r\nsupported via this configuration, but I'll investigate it later.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}